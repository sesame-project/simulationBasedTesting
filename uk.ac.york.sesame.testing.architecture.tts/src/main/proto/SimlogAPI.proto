syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

option java_package = "com.ttsnetwork.simlog";
option java_multiple_files = true;


package simlog.server;

enum ValueType {
    UNRECOGNIZED_TYPE = 0;
    NULL = 1;
    BOOL = 2;
    NUMBER = 3;
    STRING = 4;
    STRUCT = 5;
    LIST = 6;
}

enum DirectionType {
    UNRECOGNIZED_DIRECTION = 0;
    IN = 1;
    OUT = 2;
    INOUT = 3;
}


/**
 * Simulation service.
 */
service SimlogAPI {


    /**
     * Gets a topi descriptor
     */
    rpc GetTopicInfo(TopicInfoRequest) returns (TopicInfo);
    
    rpc CreateSubscriber(Subscriber) returns (stream SimlogMessage);


    /**
    * Subscribes to a topic descriptor
    */
    rpc Subscribe(SubscriptionRequest) returns (google.protobuf.Empty);


    /**
    * Inject a overwriting topic (shadow) on top of another topic (shadowed)
    * The method automatically creates an observer of the shadowed topic
    */
    rpc Inject(InjectRequest) returns (InjectResponse);

    /**
    * Opens a topic stream for writing
    */
    rpc Publish(stream PubRequest) returns (google.protobuf.Empty);
    
    /**
    * Executes a single write
    */
    rpc Write(PubRequest) returns (google.protobuf.Empty);
   
    /**
     * Executes a single synchronous read
     */
    rpc Read(ReadRequest) returns (ReadResponse);


}


message InjectRequest{
    
    string targetPath = 1;
    
    string shadowPathPrefix = 2;
}

message InjectResponse{
    
    /**
    * Descriptor of the shadow topic 
    */
    string shadowPathIn = 1;

    /**
    * Descriptor of the shadowed topic
    */
    string shadowPathOut = 2;
}


message PubRequest {
    
    string topic = 1;

    SimlogMessage data = 2;
}

message Subscriber {
    
    string name = 1;
    
    string uuid = 2;
}




message SubscriptionRequest {
    
    // full path of the topic
    string path = 1;
    
    string subscriberUUID = 2;
  
}

message TopicInfoRequest {
    
    // full path of the topic
    string path = 1;
  
}

message TopicInfo {
    
    // full path of the topic
    string path = 1;
    
    ValueType type = 2;
    
    DirectionType direction = 3;
    
    bool exists = 4;
    
  
}

message SimlogMessage{
    
    Header header = 1;

    ValueType type = 2;

    google.protobuf.Value value = 3;
}

message Header {
    
    
    google.protobuf.Timestamp timestamp = 1;
    
    string path = 2;
}

message ReadRequest {
    
    repeated string path = 1;
    
}

message ReadResponse {
    
    repeated SimlogMessage messages = 1;
    
}





