pre {

var topics = ExSce!Topic.all();
topics.first().name.println("Name: ");
topics.first().type.println("Type: ");
//var valueSet = addRandomDoubleRange(topics.first().type.parameters.first());
//valueSet.println("Here: ");
}

operation addRandomRangeRecursively(params, qualifiedName, randomAttack) : ValueSet {
	//param.type.name.println();
	for (param in params) {
		if (param.type.name.equals("float64") or param.type.name.equals("float32")) {
			"1".println();
			var randomDoubleRange = new testModel!DoubleRange;
			randomDoubleRange.lowerBound = 0.0d;
			randomDoubleRange.upperBound = 3.0d;
			randomDoubleRange.propertyName = qualifiedName+ "." + param.name;
			randomAttack.valueSet.add(randomDoubleRange);
		} else {
			//for (subParam in param.subparameter.first()) {
				"2".println();
				addRandomRangeRecursively(param.subparameters, qualifiedName + "." + param.name, randomAttack);
			//}
		}
	}
}
$instances 1
@list campaigns
operation TestCampaign create() {
    self.name = "campaign";
}

$instances Sequence {3, 5}
@list tests
operation Test create() {
    self.name = nextString("LETTER_LOWER", 5);
    //nextFromList("campaigns").tests.add(self);
}


$instances Sequence {3, 5}
@list possibleFuzzAttacks
operation RandomValueFromSetAttack create() {
	self.name = nextString("LETTER_LOWER", 5);
	
	self.topicToAttack = nextFromCollection(topics);
	
	//for (param in randomTopic.type.parameters) {
		//param.println("param: ");
		addRandomRangeRecursively(self.topicToAttack.type.parameters, self.topicToAttack.type.name, self);
	//}
    nextFromList("campaigns").possibleAttacks.add(self);
}

/*
$instances Sequence {1, 5}
@list possibleTimeTravelStateAttacks
operation TimeTravelStateAttack create() {
	self.name = nextString("LETTER_LOWER", 5);
	self.timeTravelValue = nextInt(100);
    nextFromList("campaigns").possibleAttacks.add(self);
}
*/

$instances Sequence {0,2}
@list possibleBlackholeNetworkAttacks
operation BlackholeNetworkAttack create() {
	self.name = nextString("LETTER_LOWER", 5);
    nextFromList("campaigns").possibleAttacks.add(self);
}


/*
$instances Sequence {0, 2}
@list possibleFuzzAttacks
operation ComponentPropertyAttack create() {
	self.name = nextString("LETTER_LOWER", 5);
	var topic = new testModel!Topic;
	var randomTopic = nextFromCollection(topics);
	topic.name =  randomTopic.name;
	topic.type = randomTopic.type;
	self.topicToAttack = topic;
    nextFromList("campaigns").possibleAttacks.add(self);
}
*/

@probability 0.5
pattern AddAttacksToTests
testCampaign:TestCampaign,
test:Test,
posAttacks:Attack
from: testCampaign.possibleAttacks {
    onmatch {
        test.attacks.add(posAttacks);
    }
}