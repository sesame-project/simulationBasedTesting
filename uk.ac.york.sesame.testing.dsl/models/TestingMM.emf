@namespace(uri="TestingMM", prefix="TestingMM")

package TestingPackage;
//import "http://ExSceMM";

// TestingSpace - which specifies the boundaries of the testing space
// (the possible attacks), a grammar used for conditions,
// and the metrics to be used. 
class TestingSpace {
	attr String name;
	val Metrics.Metric[*] metrics;
	val FuzzingOperations.FuzzingOperation[*] possibleFuzzingOperations;
	//val GrammarSpec.GrammarSpecification[0..1] grammarSpecification;
	val TestCampaign[*] campaigns;
	val MRSPackage.MRS[1] mrs;
}

// TestingCampaign - specifies an experiment 
// (evolutionary process, selected metrics/attacks, and any constraints upon the grammar for this run)

// Generally there should be probabilities of including each attack in the model - for the testCampaign

class TestCampaign {
	attr String name;
	ref Metrics.Metric[*] metrics;
	ref FuzzingOperations.FuzzingOperation[*] includedOperations;
	//val GrammarSpec.GrammarConstraint[*] constraints;
	val TestGenerationApproach[1] approach;
	val Test[*]#parentCampaign performedTests;
	val CampaignResultSet[*] resultSets;
	val ExecutionEndTrigger[1] defaultEndTrigger;
}

// This is analagous to a fuzzing CSV file in SAFEMUV - multiple attacks
class Test {
	attr String name;
	val FuzzingOperations.FuzzingOperation[*]#containingTest operations;
	val Metrics.MetricInstance[*] metrics;
	val ExecutionEndTrigger[1] endTrigger;
	// developedFrom can contain e.g. the evolutionary history of this Test,
	// which other tests it was developed from
	ref Test[*] developedFrom; 
	readonly transient ref TestCampaign[1]#performedTests parentCampaign;
}

enum ResultSetStatus {
	FINAL = 1;
	INTERMEDIATE = 2;
}

class CampaignResultSet {
	attr String name;
	attr ResultSetStatus status;
	ref Test[*] results; 
}

abstract class ExecutionEndTrigger {
		
}

class TimeBasedEnd extends ExecutionEndTrigger {
	attr long timeLimitSeconds;
}

abstract class TestGenerationApproach {

}

class RandomTestGeneration extends TestGenerationApproach {
	
}

abstract class EvolutionaryAlgorithm extends TestGenerationApproach {

}

class NSGAEvolutionaryAlgorithm extends EvolutionaryAlgorithm {
	attr int populationSize;
	attr int iterations;
}

package FuzzingOperations {

abstract class FuzzingOperation {
	attr String name;
	attr int priority;

	val Activation[1] activation; // FuzzingOperation only has a single activation
	ref MRSPackage.Variable[0..1] variableToAffect;
	attr boolean messagesFromAllComponenents = true;
	ref MRSPackage.Node[*] fromNodes;
	attr boolean messagesToAllComponenents = true;
	ref MRSPackage.Node[*] toNodes;
	ref MRSPackage.Node[0..1] nodeToFuzz;
	attr boolean allPublishingVars = false;
	ref MRSPackage.Variable[*] publishingVars;
	attr boolean allSubscribingVars = false;
	ref MRSPackage.Variable[*] subscribingVars;
	ref FuzzingOperation[0..1] fromTemplate;
	readonly transient ref Test[0..1]#operations containingTest;
}

class OfflineFuzzingOperation extends FuzzingOperation {
	attr OfflineOperationTime operationTime;
}

enum OfflineOperationTime {
	PRE;
	POST;
}

// I envision this as an instance where just the infrastructure (Flink flatmap) will be created and 
// added to the orchestrator and users will need to write their own code. Extensibility point...
class CustomFuzzingOperation extends FuzzingOperation {
	
}

class CustomOfflineFuzzingOperation extends OfflineFuzzingOperation {
	
}

abstract class Activation {
	
}

class FixedTimeActivation extends Activation {
	attr double startTime;
	attr double endTime;
}

class ConditionBasedActivation extends Activation {
	val StandardGrammar.Condition starting;
	val StandardGrammar.Condition ending;
	attr int maximumActivations = 1;
}

class FuzzTestingOperation extends FuzzingOperation {
	
}

class ComponentOperation extends FuzzTestingOperation {
}

class ComponentPropertyOperation extends FuzzTestingOperation {
	ref MRSPackage.ComponentProperty[0..1] propertyToAffect;
}

class ComponentSubPropertyOperation extends FuzzTestingOperation {
	ref MRSPackage.ComponentProperty[0..1] propertyToAffect;
	ref MRSPackage.Type[0..1] subProperty;
}

class VariableOperation extends FuzzTestingOperation {
	ref MRSPackage.Parameter[*] subParameters;
}

class RandomValueFuzzingOperation extends ComponentOperation {
	attr int seed;
}

class RandomValueFromSetOperation extends RandomValueFuzzingOperation {
	val ValueSet[*] valueSet;
}

// Value Sets
class ValueSet {
	
}

class ValueRange extends ValueSet {
	// This might be a ref to the MRSPackage.ComponentProperty
	attr String propertyName;
	
}

class IntRange extends ValueRange {
	attr int lowerBound;
	attr int upperBound;
}

class DoubleRange extends ValueRange {
	attr double lowerBound;
	attr double upperBound;
}

class StringRange extends ValueRange {
	attr String lowerBound;
	attr String upperBound;
}

class ExternalResourceSet extends ValueSet {
	attr String location;
}
// End of Value Sets

class ResourceFuzzingOperation extends FuzzingOperation {
	
}

class StateFuzzingOperation extends FuzzingOperation {

	
}

class NetworkFuzzingOperation extends FuzzingOperation {

	
}

class LoadResourceOperation extends ResourceFuzzingOperation {
	ref LoadType[1] loadType;
}

class LoadType {
	attr int min;
	attr int max;
}

class CPULoadType extends LoadType {
	
}

class MemoryLoadType extends LoadType {

}

class IOLoadType extends LoadType {

}

class DiskLoadType extends LoadType {

}

class ShutdownStateOperaton extends StateFuzzingOperation {
	
}

class TimeTravelStateOperaton extends StateFuzzingOperation {
	val DoubleRange[1] timeTravelValue;
}

class ProcessKillerStateOperaton extends StateFuzzingOperation {
	attr int processId;
}

class BlackholeNetworkOperation extends NetworkFuzzingOperation {
	
}

class LatencyNetworkOperation extends NetworkFuzzingOperation {
	val DoubleRange[1] latency;
}

class PacketLossNetworkOperation extends NetworkFuzzingOperation {
	val DoubleRange[1] frequency;
}

class MultipleMessagesNetworkOperation extends NetworkFuzzingOperation {
	val IntRange[1] howManyClones;
}

}

package Metrics {
abstract class SimStream {
	
}

class InputStream extends SimStream {
	
}

class OutputStream extends SimStream {
	
}

enum MetricOptimisationDirection {
	HIGHEST = 1;
	LOWEST = 2;
}

abstract class Metric {
	attr String name;
	attr MetricOptimisationDirection dir;
	ref MRSPackage.Variable[*] relatedVariables;
	val MetricDefault[0..1] default;	
}

class MetricDefault {
	attr double defaultVal;
}

class VariableMetric extends Metric {
	ref MRSPackage.Variable[1] chosenVariables;
}

class MetricInstance {
	ref Metrics.Metric[1] metric;
	val Results.Result[1] result;
}

abstract class PropertyMetric extends Metric {
	ref MRSPackage.ComponentProperty[1] property;
}

class ConditionalPropertyMetric extends PropertyMetric {
	attr String condition;
}

class StreamMetric extends Metric {
	val SimStream[*] streams;
	val StreamResult res; 
}

class FuzzingOperationTimesMetric extends StreamMetric {
	
} 

abstract class StreamResult {
	
}

class FileStreamResult extends StreamResult {
	attr String filename; 
}
}

package Results {
	class Result {
		attr String name;
		attr double value;
	}
}

package Conditions {

}

// This is the defined standard grammar - supports basic and composite
// conditions as in the MODELS'22 paper
package StandardGrammar {
	
abstract class ConditionElement {
		
}
	
class CompositeCondition extends ConditionElement {
	val ConditionElement[1] left;
	attr BinaryLogicalOperation[1] binop;
	val ConditionElement[1] right;
}
	
class BasicCondition extends ConditionElement {
	val ConditionVariable[1] left;
	attr BinaryComparisonOperation[1] bincomp;
	val ConditionLiteral[1] right;
}
	
abstract class ConditionLiteral {
		
}
	
class ConditionInteger extends ConditionLiteral {
	attr int value;
}
	
// Variables reference the metrics that supply their values
class ConditionVariable extends ConditionLiteral {
	ref Metrics.Metric[1] metric;
}
	
enum BinaryComparisonOperation {
	LESS_THAN = 1;
	GREATER_THAN = 2;	
}
	
enum BinaryLogicalOperation {
	AND = 1;
	OR = 2;	
}
	
class Condition {
	attr String name;
	val StandardGrammar.ConditionElement[1] c; 
}
}

//------------------------------------------------------------

package MRSPackage {
	class MRS {
	    val Variable[*] variables;
		attr String launchFileLocation;
		val Node[*] nodes;
		val Simulator[1] simulator;
		val Type[*] propertyType;
	}

	class Node {
		attr String name;
		ref Variable[*] subscriber;
		ref Variable[*] publisher;
		ref ComponentProperty[*] properties;
	}

	class Variable {
		attr String name;
		ref Type[1] type;
	}

	class Type {
		attr String name;
		attr ParsingMethod[1] parsingMethod;
		val Parameter[*] parameters;
		//ref Type[*] subTypes;
	}

	enum ParsingMethod {
		JSON;
		CSV;
		CUSTOM;
	}

	class Parameter {
		attr String name;
		val Parameter[*] subparameters;
		ref Type[1] type;
	}

	class ComponentProperty {
		attr String name;
		ref Type[1] type;
	}

	abstract class Simulator {
	
	}

	class ROSSimulator extends Simulator {
		attr String hostname;
		attr String port;
	}

	class MOOSSimulator extends Simulator {
		attr String hostname;
		attr String port;
	}

	class TTSSimulator extends Simulator {
		attr String hostname;
		attr String port;
	}
}