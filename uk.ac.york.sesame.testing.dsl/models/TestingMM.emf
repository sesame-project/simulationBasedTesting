@namespace(uri="TestingMM",prefix="TestingMM")
package TestingPackage;
import "http://ExSceMM";

// TestSpace needed - which specifies the space and the grammar
// TestingCampaign - which specifies the evolutionary process, and any constraints upon the grammar for this run
// TestingInstance - analagous to a fuzzing record from SAFEMUV (multiple 
// Test - but in this contains a number of attacks

abstract class TestElement {
	
}

// The root element - specifies that the model contains
// either one of a TestingSpace, TestCampaign or Test
class TestingInformation {
	val TestElement[1] testElement;	
}

class TestingSpace extends TestElement {
	attr String name;
	val Test[*] tests;
	val Metrics.Metric[*] metrics;
	val Attacks.Attack[*] possibleAttacks;
	val GrammarSpecification[0..1] grammarSpecfication;
	// The grammar specification
}

class TestCampaign extends TestElement {
	attr String name;
	val Test[*] tests;
	val Metrics.Metric[*] metrics;
	val Attacks.Attack[*] possibleAttacks;
	val GrammarConstraint[*] constraints;
	val TestGenerationApproach[1] approach;
	// General parameters for the evolution
	// probabilities of attack inclusion
}

// Test here contains a number of attacks?
// TestInstance is therefore redundant

// This is analagous to a fuzzing record
class Test extends TestElement {
	attr String name;
	ref Attacks.Attack[*] attacks;
	val Metrics.MetricInstance[*] metrics;
}

class GrammarConstraint {
	
}

abstract class TestGenerationApproach {

}

class RandomTestGeneration extends TestGenerationApproach {
	
}

abstract class EvolutionaryAlgorithm extends TestGenerationApproach {

}

class NSGAEvolutionaryAlgorithm extends EvolutionaryAlgorithm {
	attr int populationSize;
	attr int iterations;
}

class GrammarSpecification {
	
}



package Attacks {

class Attack {
	attr String name;
	attr int priority;
	val AttackTime[*] attackTimes;
	ref MRSPackage.Topic[0..1] topicToAttack;
	attr boolean messagesFromAllComponenents = true;
	ref MRSPackage.Node[*] fromNodes;
	attr boolean messagesToAllComponenents = true;
	ref MRSPackage.Node[*] toNodes;
	ref MRSPackage.Node[0..1] nodeToAttack;
	attr boolean allPublishingTopics = false;
	ref MRSPackage.Topic[*] publishingTopics;
	attr boolean allSubscribingTopics = false;
	ref MRSPackage.Topic[*] subscribingTopics;
	ref Attack[1] next;
	// 	the above repalces this: attr int order;
	
}

class OfflineAttack extends Attack {
	attr OfflineAttackTime attackTime;
}

enum OfflineAttackTime {
	PRE;
	POST;
}

// I envision this as an instance where just the infrastructure (Flink flatmap) will be created and 
// added to the orchestrator and users will need to write their own code. Extensibility point...
class CustomAttack extends Attack {
	
}

class CustomOfflineAttack extends OfflineAttack {
	
}

class AttackTime {
	attr String startTime;
	attr String endTime;
}

class FuzzTestingAttack extends Attack {
	
}

class ComponentAttack extends FuzzTestingAttack {
}

class ComponentPropertyAttack extends FuzzTestingAttack {
	// This might need to be MRSPackage.Type
	ref MRSPackage.ComponentProperty[0..1] propertyToAttack;
}

class ComponentSubPropertyAttack extends FuzzTestingAttack {
	// This might need to be MRSPackage.Type
	ref MRSPackage.ComponentProperty[0..1] propertyToAttack;
	ref MRSPackage.Type[0..1] subProperty;
}

class TopicAttack extends FuzzTestingAttack {
	ref MRSPackage.Parameter[*] subParameters;
}

class RandomValueAttack extends ComponentPropertyAttack {
	attr int seed;
}

class RandomValueFromSetAttack extends RandomValueAttack {
	val ValueSet[*] valueSet;
}

// Value Sets
class ValueSet {
	
}

class ValueRange extends ValueSet {
	// This might be a ref to the MRSPackage.ComponentProperty
	attr String propertyName;
	
}

class IntRange extends ValueRange {
	attr int lowerBound;
	attr int upperBound;
}

class DoubleRange extends ValueRange {
	attr double lowerBound;
	attr double upperBound;
}

class StringRange extends ValueRange {
	attr String lowerBound;
	attr String upperBound;
}

class ExternalResourceSet extends ValueSet {
	attr String location;
}
// End of Value Sets

class ResourceAttack extends Attack {

	
}

class StateAttack extends Attack {

	
}

class NetworkAttack extends Attack {

	
}

class LoadResourceAttack extends ResourceAttack {
	ref LoadType[1] loadType;
}

class LoadType {
	attr int min;
	attr int max;
}

class CPULoadType extends LoadType {
	
}

class MemoryLoadType extends LoadType {

}

class IOLoadType extends LoadType {

}

class DiskLoadType extends LoadType {

}

class ShutdownStateAttack extends StateAttack {
	
}

class TimeTravelStateAttack extends StateAttack {
	attr int timeTravelValue;
}

class ProcessKillerStateAttack extends StateAttack {
	attr int processId;
}

class BlackholeNetworkAttack extends NetworkAttack {
	
}

class LatencyNetworkAttack extends NetworkAttack {
	attr double latency;
}

class PacketLossNetworkAttack extends NetworkAttack {
	attr double frequency;
}

class MultipleMessagesNetworkAttack extends NetworkAttack {
	attr int howManyClones;
}

}

package Metrics {
	
abstract class SimStream {
	
}

class InputStream extends SimStream {
	
}

class OutputStream extends SimStream {
	
}
	
abstract class Metric {
	attr String name;
	ref MRSPackage.Topic[*] relatedTopics;	
}

class TopicMetric extends Metric {
	ref MRSPackage.Topic[1] chosenTopics;
}

class MetricInstance {
	ref Metrics.Metric[1] metric;
	val Results.Result[1] result;
}

abstract class PropertyMetric extends Metric {
	ref MRSPackage.ComponentProperty[1] property;
}

class ConditionalPropertyMetric extends PropertyMetric {
	attr String condition;
}

class StreamMetric extends Metric {
	val SimStream[*] streams;
	val StreamResult res; 
}

abstract class StreamResult {
	
}

class FileStreamResult extends StreamResult {
	attr String filename; 
}

}

package Results {
	
class Result {
	attr String name;
	attr double value;
}
}

