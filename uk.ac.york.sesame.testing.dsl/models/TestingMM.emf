@namespace(uri="TestingMM", prefix="TestingMM")

package TestingPackage;
//import "http://ExSceMM";

// To register updated models in the child eclipse, need to click the
// "Generate SESAME code" button

// TestingSpace - which specifies the boundaries of the testing space
// (the possible attacks), a grammar used for conditions,
// and the metrics to be used. 
class TestingSpace {
	attr String name;
	val Metrics.Metric[*] metrics;
	val Attacks.Attack[*] possibleAttacks;
	val GrammarSpecification[0..1] grammarSpecfication;
	val TestCampaign[*] campaigns;
	val MRSPackage.MRS[1] mrs;
}


// TestingCampaign - specifies an experiment 
// (evolutionary process, selected metrics/attacks, and any constraints upon the grammar for this run)

// Generally there should be probabilities of including each attack in the model - for the testCampaign

class TestCampaign {
	attr String name;
	ref Metrics.Metric[*] metrics;
	ref Attacks.Attack[*] includedAttacks;
	val GrammarConstraint[*] constraints;
	val TestGenerationApproach[1] approach;
	val Test[*]#parentCampaign performedTests;
	ref Test[*] finalResults;
	val ExecutionEndTrigger[1] defaultEndTrigger;
}

// This is analagous to a fuzzing CSV file in SAFEMUV - multiple attacks
class Test {
	attr String name;
	val Attacks.Attack[*] attacks;
	val Metrics.MetricInstance[*] metrics;
	val ExecutionEndTrigger[1] endTrigger;
	ref Test[*] developedFrom; 
	readonly transient ref TestCampaign[1]#performedTests parentCampaign;
}

abstract class ExecutionEndTrigger {
		
}

class TimeBasedEnd extends ExecutionEndTrigger {
	attr long timeLimitSeconds;
}

// TODO: condition-based simulation end?

class GrammarConstraint {
	
}

abstract class TestGenerationApproach {

}

class RandomTestGeneration extends TestGenerationApproach {
	
}

abstract class EvolutionaryAlgorithm extends TestGenerationApproach {

}

class NSGAEvolutionaryAlgorithm extends EvolutionaryAlgorithm {
	attr int populationSize;
	attr int iterations;
}

class GrammarSpecification {
	
}



package Attacks {

// TODO: why is this not abstract?
class Attack {
	attr String name;
	attr int priority;

	// TODO: should Attack have a single or multiple activations	
	val AttackActivation[*] attackActivation;
	ref MRSPackage.Topic[0..1] topicToAttack;
	attr boolean messagesFromAllComponenents = true;
	ref MRSPackage.Node[*] fromNodes;
	attr boolean messagesToAllComponenents = true;
	ref MRSPackage.Node[*] toNodes;
	ref MRSPackage.Node[0..1] nodeToAttack;
	attr boolean allPublishingTopics = false;
	ref MRSPackage.Topic[*] publishingTopics;
	attr boolean allSubscribingTopics = false;
	ref MRSPackage.Topic[*] subscribingTopics;
	ref Attack[0..1] fromTemplate;
}

class OfflineAttack extends Attack {
	attr OfflineAttackTime attackTime;
}

enum OfflineAttackTime {
	PRE;
	POST;
}

// I envision this as an instance where just the infrastructure (Flink flatmap) will be created and 
// added to the orchestrator and users will need to write their own code. Extensibility point...
class CustomAttack extends Attack {
	
}

class CustomOfflineAttack extends OfflineAttack {
	
}

abstract class AttackActivation {
	
}

class AttackFixedTime extends AttackActivation {
	attr double startTime;
	attr double endTime;
}

class ConditionBased extends AttackActivation {
	
}

class FuzzTestingAttack extends Attack {
	
}

class ComponentAttack extends FuzzTestingAttack {
}

class ComponentPropertyAttack extends FuzzTestingAttack {
	// This might need to be MRSPackage.Type
	ref MRSPackage.ComponentProperty[0..1] propertyToAttack;
}

class ComponentSubPropertyAttack extends FuzzTestingAttack {
	// This might need to be MRSPackage.Type
	ref MRSPackage.ComponentProperty[0..1] propertyToAttack;
	ref MRSPackage.Type[0..1] subProperty;
}

class TopicAttack extends FuzzTestingAttack {
	ref MRSPackage.Parameter[*] subParameters;
}

class RandomValueAttack extends ComponentPropertyAttack {
	attr int seed;
}

class RandomValueFromSetAttack extends RandomValueAttack {
	val ValueSet[*] valueSet;
}

// Value Sets
class ValueSet {
	
}

class ValueRange extends ValueSet {
	// This might be a ref to the MRSPackage.ComponentProperty
	attr String propertyName;
	
}

class IntRange extends ValueRange {
	attr int lowerBound;
	attr int upperBound;
}

class DoubleRange extends ValueRange {
	attr double lowerBound;
	attr double upperBound;
}

class StringRange extends ValueRange {
	attr String lowerBound;
	attr String upperBound;
}

class ExternalResourceSet extends ValueSet {
	attr String location;
}
// End of Value Sets

class ResourceAttack extends Attack {

	
}

class StateAttack extends Attack {

	
}

class NetworkAttack extends Attack {

	
}

class LoadResourceAttack extends ResourceAttack {
	ref LoadType[1] loadType;
}

class LoadType {
	attr int min;
	attr int max;
}

class CPULoadType extends LoadType {
	
}

class MemoryLoadType extends LoadType {

}

class IOLoadType extends LoadType {

}

class DiskLoadType extends LoadType {

}

class ShutdownStateAttack extends StateAttack {
	
}

class TimeTravelStateAttack extends StateAttack {
	val DoubleRange[1] timeTravelValue;
}

class ProcessKillerStateAttack extends StateAttack {
	attr int processId;
}

class BlackholeNetworkAttack extends NetworkAttack {
	
}

class LatencyNetworkAttack extends NetworkAttack {
	val DoubleRange[1] latency;
}

class PacketLossNetworkAttack extends NetworkAttack {
	val DoubleRange[1] frequency;
}

class MultipleMessagesNetworkAttack extends NetworkAttack {
	val IntRange[1] howManyClones;
}

}

package Metrics {
	
abstract class SimStream {
	
}

class InputStream extends SimStream {
	
}

class OutputStream extends SimStream {
	
}

enum MetricOptimisationDirection {
	HIGHEST = 1;
	LOWEST = 2;
}

enum MetricStateKeyedBy {
	TEST = 1;
	TOPIC = 2;
}
	
abstract class Metric {
	attr String name;
	attr MetricOptimisationDirection dir;
	attr MetricStateKeyedBy keyedBy;
	ref MRSPackage.Topic[*] relatedTopics;
	val MetricDefault[0..1] default;	
}

class MetricDefault {
	attr double defaultVal;
}

class TopicMetric extends Metric {
	ref MRSPackage.Topic[1] chosenTopics;
}

class MetricInstance {
	ref Metrics.Metric[1] metric;
	val Results.Result[1] result;
}

abstract class PropertyMetric extends Metric {
	ref MRSPackage.ComponentProperty[1] property;
}

class ConditionalPropertyMetric extends PropertyMetric {
	attr String condition;
}

class StreamMetric extends Metric {
	val SimStream[*] streams;
	val StreamResult res; 
}

abstract class StreamResult {
	
}

class FileStreamResult extends StreamResult {
	attr String filename; 
}

}

package Results {
	
class Result {
	attr String name;
	attr double value;
}
}

//------------------------------------------------------------

package MRSPackage {
	

class MRS {
    val Topic[*] topics;
	attr String launchFileLocation;
	val Node[*] nodes;
	val Simulator[1] simulator;
	val Type[*] propertyType;
}

class Node {
	attr String name;
	ref Topic[*] subscriber;
	ref Topic[*] publisher;
	ref ComponentProperty[*] properties;
}

class Topic {
	attr String name;
	ref Type[1] type;
}

class Type {
	attr String name;
	attr ParsingMethod[1] parsingMethod;
	val Parameter[*] parameters;
	//ref Type[*] subTypes;
}

enum ParsingMethod {
	JSON;
	CSV;
	CUSTOM;
}

class Parameter {
	attr String name;
	val Parameter[*] subparameters;
	ref Type[1] type;
}

class ComponentProperty {
	attr String name;
	ref Type[1] type;
}

abstract class Simulator {
}

class ROSSimulator extends Simulator {
	attr String hostname;
	attr String port;
}

class MOOSSimulator extends Simulator {
	attr String hostname;
	attr String port;
}
}
