[% var classNameExt = fuzzOp.containingTest.name.firstToUpperCase(); 
%]
import java.util.Map;
import java.util.HashMap;
import java.util.Random;
import datatypes.DoubleRange;

import org.apache.flink.util.Collector;
import org.json.simple.*;

import uk.ac.york.sesame.testing.architecture.utilities.ParsingUtils;
import uk.ac.york.sesame.testing.architecture.utilities.UpdateLambda;
import uk.ac.york.sesame.testing.architecture.data.EventMessage;

import uk.ac.york.sesame.testing.architecture.fuzzingoperations.*;

// TODO: EGL generators need to generate based on fuzzOp activation
public class [%=fuzzOp.name%]FlatMap_[%= classNameExt %] extends [%= superClassName() %] {

	[% var varNames = new Set; %]

	private static final long serialVersionUID = 1L;
	Random rng;

	[% if (fuzzOp.activation.isTypeOf(FixedTimeActivation)) { %]
	public [%=fuzzOp.name%]FlatMap_[%= classNameExt %](String topic, double start, double end, long seed) {
		super(topic,start,end);
		this.rng = new Random(seed);
	}
	[% } %]
	
	[% if (fuzzOp.activation.isTypeOf(ConditionBasedActivation)) { 
		var startCond = fuzzOp.activation.starting;
		var endCond = fuzzOp.activation.ending;
	%]
	
	public [%=fuzzOp.name%]FlatMap_[%= classNameExt %](String topic, long seed) {
		super(topic);
		this.rng = new Random(seed);
	}
	
	protected boolean evalStartCondition() {
		boolean res = false;
		try {
			///// GENERATED CUSTOM CONDITION CODE START - STARTCOND
			[% var startCondString = generateCondBoolean(startCond);
			   var varList = getVarsForCond(fuzzOp, startCond); %]
			[% for (v in varList) { %]
				Double [%= v %] = (Double) varState.get("[%= v %]");
				if ([%= v %] == null) {
					[% var initValue = getInitValue(v); 
					   if (initValue != null) { %]
					   		[%= v %] = [%= getInitValue(v) %];
					[% } else { %]    		
					   		return false;
					[% } %] 
				}	
		    [% } %]
		    res = [%= startCondString %];
			///// GENERATED CUSTOM CONDITION CODE END - STARTCOND
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return res;
	}
	
	protected boolean evalEndCondition() {
		boolean res = false;
		try {
			///// GENERATED CUSTOM CONDITION CODE START - ENDCOND
			[% var endCondString = generateCondBoolean(endCond);
			   var varList = getVarsForCond(fuzzOp, endCond); %]
			[% for (v in varList) { %]
				Double [%= v %] = (Double) varState.get("[%= v %]");
				if ([%= v %] == null) {
					[% var initValue = getInitValue(v); 
					   if (initValue != null) { %]
					   		[%= v %] = [%= getInitValue(v) %];
					[% } else { %]    		
					   		return false;
					[% } %] 
				}	
		    [% } %]
			res = [%= endCondString %];
			///// GENERATED CUSTOM CONDITION CODE END - STARTCOND
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return res;
	}
	[% } %]
	
	@Override
	public void processElement1(EventMessage value, Context ctx, Collector<EventMessage> out) throws Exception { 
	[%
		var parsingMethod = fuzzOp.variableToAffect.type.parsingMethod.name;
		var isFuzzingRelative = fuzzOp.isRelative;
		var paramCount = 0;

		if (parsingMethod.equalsIgnoreCase("JSON")) { 
	%]
			if (value.getTopic().equals(topic) && isReadyNow()) {
				Object obj = JSONValue.parse(value.getValue().toString());
	      		JSONObject jo = (JSONObject)obj;
	      		[* TODO: other ValueSets here *]
	      	[% for (aParameter in fuzzOp.valueSet) { %]
	      		double genVal[%= paramCount++ %] = new DoubleRange([%= aParameter.lowerBound %], [%=aParameter.upperBound %]).generateInRange(rng);
	      		[% if (isFuzzingRelative) { %]
	      		UpdateLambda lop[%= paramCount %] = ((orig) -> { return ((Double)orig + genVal[%= paramCount %]); });
				jo = ParsingUtils.updateJSONObject(jo, "[%= aParameter.propertyName %]", lop[%= paramCount %]);
				[% } else { %]
				jo = ParsingUtils.updateJSONObject(jo, "[%= aParameter.propertyName %]", genVal[%= paramCount %]);
				[% } %]
	      		
	      	[% } %]
	      		EventMessage valueOut = new EventMessage(value);
	      		valueOut.setValue(jo.toString());
				out.collect(valueOut);
			} else {
				out.collect(value);
			}
			
		[% } else if (parsingMethod.equalsIgnoreCase("STRING")) { %]
			if (value.getTopic().contains(topic) && isReadyNow()) {
				[* TODO: this will apply them sequentially? should it? *]
				[% for (aParameter in fuzzOp.valueSet) { %]
				double newValue = new DoubleRange([%= aParameter.lowerBound %], [%=aParameter.upperBound %]).generateInRange(rng);
				EventMessage valueOut = new EventMessage(value);
				[% if (isFuzzingRelative) { %]
				Double origVal = Double.parseDouble((String)value.getValue());
				Double fuzzedVal = origVal + newValue;
				valueOut.setValue(fuzzedVal.toString());
				[% } else { %]
				valueOut.setValue(newValue.toString());
				[% } %]
				
	      		[% } %]
				out.collect(valueOut);
			} else {
				out.collect(value);
			}
			
			
		[% } else if (parsingMethod.equalsIgnoreCase("CSV")) { %]
			raise Unimplemented("Parsing method CSV is not yet implemented");
		[% } %]
		
			
	}	
	
	[% %]
	
}

[% 
operation superClassName() {
	if (fuzzOp.activation.isTypeOf(FixedTimeActivation)) {
		return "TimeBasedFuzzingOperation";	
	}

	if (fuzzOp.activation.isTypeOf(ConditionBasedActivation)) {
		return "ConditionBasedFuzzingOperation";	
	}
}

operation generateBinLogicOp(binop) {
	if (binop == BinaryLogicalOperation#AND) {
		return "&&";
	}
	
	if (binop == BinaryLogicalOperation#OR) {
		return "||";
	}
}

operation generateBinComp(binop) {
	if (binop == BinaryComparisonOperation#LESS_THAN) {
		return "<";
	}
	
	if (binop == BinaryComparisonOperation#GREATER_THAN) {
		return ">";
	}
	
	if (binop == BinaryComparisonOperation#EQUALS) {
		return "==";
	}
}

operation generateCondElement(c) {
	if (c.isTypeOf(CompositeCondition)) {
		return "(" + generateCondElement(c.left) + ") " + generateBinLogicOp(c.binop) + " (" + generateCondElement(c.right) + ")";
	}
	
	if (c.isTypeOf(BasicCondition)) {
		return "(" + generateCondElement(c.left) + ") " + generateBinComp(c.bincomp) + " (" + generateCondElement(c.right) + ")";
	}
	
	if (c.isTypeOf(ConditionVariable)) {
		var vn = c.metric.name;
		// Put named variable into global list
		varNames.add(vn);
		return vn;
	}
	
	if (c.isTypeOf(ConditionInteger)) {
		return c.value;
	}
}

operation generateCondBoolean(cond) {
	return generateCondElement(cond.c);
}

operation getVarsForCond(fuzzOp, cond) {
	return varNames;
}

operation getInitValue(varName) {
	var campaign = fuzzOp.containingTest.parentCampaign;
    var metrics = campaign.conditionMetrics;
    var initVal = null;
    for (m in metrics) {
        if (m.name == varName) {
        	if (m.initValue != null) {
        		initVal = m.initValue.defaultVal;
        	}
        }
    }
    return initVal;
}

%]

