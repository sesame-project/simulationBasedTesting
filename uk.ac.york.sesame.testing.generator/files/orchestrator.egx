/*
rule ros2Main transform mrs: MRS!MRS{
	guard : mrs.simulator.isTypeOf(MRS!ROSSimulator)
	template : "ros/rosMain.egl"
	target : "src/TestingTestSuiteRunner.java"
}
*/

rule test2Class transform test: Testing!Test {
	template : "ros/rosMain.egl"
	target : "src/" + test.name.firstToUpperCase() + "TestingTestSuiteRunner.java"
}

rule metricAsMultiStream transform metric: Testing!StreamMetric {
	guard : metric.streams.size() == 2
	template : "metrics/multiStream.egl"
	target : "src/"+ metric.name + "Metric.java"
}

rule metricAsSingleStream transform metric: Testing!StreamMetric {
	guard : metric.streams.size() == 1
	template : "metrics/singleStream.egl"
	target : "src/"+ metric.name + "Metric.java"
}

/* Other metrics here */

rule packetLoss2FlatMap transform attack: Testing!PacketLossNetworkAttack {
	template : "attacks/packetLoss.egl"
	//target : "src/"+ attack.name.firstToUpperCase() + "FlatMap.java"
	target : "src/PacketLossFlatMap.java"	
}

rule blackHole2FlatMap transform attack: Testing!BlackholeNetworkAttack {
	template : "attacks/blackHole.egl"
	target : "src/BlackHoleFlatMap.java"	
}

rule fuzzRange2FlatMap transform attack: Testing!RandomValueFromSetAttack {
	template : "attacks/fuzzRange.egl"
	target : "src/"+ attack.name + "FlatMap.java"
}

rule rangeClass transform testCampaign: Testing!TestCampaign {
	guard : Testing!DoubleRange.all().notEmpty()
	template : "datatypes/doubleRange.egl"
	target : "src/datatypes/DoubleRange.java"
}