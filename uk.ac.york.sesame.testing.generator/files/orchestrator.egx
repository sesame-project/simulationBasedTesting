/*
rule ros2Main transform mrs: MRS!MRS{
	guard : mrs.simulator.isTypeOf(MRS!ROSSimulator)
	template : "ros/rosMain.egl"
	target : "src/TestingTestSuiteRunner.java"
}
*/

rule test2Class transform test: Testing!Test {
	template : "ros/rosMain.egl"
	target : "src/" + test.name.firstToUpperCase() + "TestingTestSuiteRunner.java"
}

/* This has to be a greedy test to catch all subtypes. It may be 
best to replace it with individual subtype rules */
@greedy
rule metricNotStream2Class transform metric: Testing!Metric  {
	guard : not metric.asStream
	template : "metrics/notStream.egl"
	target : "src/"+ metric.name + ".java"
}

@greedy
rule metricAsStream2Class transform metric: Testing!Metric {
	guard : metric.asStream
	template : "metrics/asStream.egl"
	target : "src/"+ metric.name + ".java"
}

rule packetLoss2FlatMap transform attack: Testing!PacketLossNetworkAttack {
	template : "attacks/packetLoss.egl"
	//target : "src/"+ attack.name.firstToUpperCase() + "FlatMap.java"
	target : "src/PacketLossFlatMap.java"	
}

rule blackHole2FlatMap transform attack: Testing!BlackholeNetworkAttack {
	template : "attacks/blackHole.egl"
	target : "src/BlackHoleFlatMap.java"	
}

rule fuzzRange2FlatMap transform attack: Testing!RandomValueFromSetAttack {
	template : "attacks/fuzzRange.egl"
	target : "src/"+ attack.name + "FlatMap.java"
}

rule rangeClass transform testCampaign: Testing!TestCampaign {
	guard : Testing!DoubleRange.all().notEmpty()
	template : "datatypes/doubleRange.egl"
	target : "src/datatypes/DoubleRange.java"
}