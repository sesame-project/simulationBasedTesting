import java.util.Map;
import java.util.HashMap;
import java.util.Random;
import datatypes.DoubleRange;

import org.apache.flink.util.Collector;
import org.json.simple.*;

import uk.ac.york.sesame.testing.architecture.attacks.Attack;
import uk.ac.york.sesame.testing.architecture.data.EventMessage;

public class [%=attack.name%]FlatMap extends Attack {

	private static final long serialVersionUID = 1L;

	Map<String, DoubleRange> possibleValues = new HashMap<String,DoubleRange>();
	Random rng;

	public [%=attack.name%]FlatMap(String topic, String start, String end, long seed) {
		super(topic,start,end);
		this.rng = new Random(seed);
		[%
		for(aParameter in attack.valueSet) { %]
			this.possibleValues.put("[%=aParameter.propertyName%]", new DoubleRange([%=aParameter.lowerBound%], [%=aParameter.upperBound%]));
		[%
		}
		%]
	}
	
	@Override
	public void flatMap(EventMessage value, Collector<EventMessage> out) throws Exception { [%
		var parsingMethod = attack.topicToAttack.type.parsingMethod.name;
		if (parsingMethod.equalsIgnoreCase("JSON")) {
			%]
			
			Object obj = JSONValue.parse(value.getValue().toString());
	      	JSONObject jo = (JSONObject)obj;
	      	for (Map.Entry<String,DoubleRange> e : possibleValues.entrySet()) {
	      		String k = e.getKey();
	      		DoubleRange dr = e.getValue();
	      		jo.put(k, dr.generateInRange(rng));
	      	}
	      	[%     	
		} else if (parsingMethod.equalsIgnoreCase("CSV")) {
			%]
			raise Unimplemented("Parsing method CSV is not yet implemented");
			[%
		}
		%]	
	}	
}
